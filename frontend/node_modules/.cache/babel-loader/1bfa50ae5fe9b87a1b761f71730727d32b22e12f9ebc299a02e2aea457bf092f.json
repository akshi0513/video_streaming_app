{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:9002';\n\n// Axios instance for authenticated requests\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Include token in requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n\n  // Attach Authorization token if available\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Dynamically set Content-Type\n  if (!(config.data instanceof FormData)) {\n    config.headers['Content-Type'] = 'application/json'; // Set JSON header only for non-FormData\n  }\n  return config;\n});\n\n// API functions\n\n// User authentication\nexport const login = (email, password) => api.post('/api/auth/login', {\n  email,\n  password\n});\nexport const register = (username, email, password) => api.post('/api/auth/register', {\n  username,\n  email,\n  password\n});\n\n// Upload video - FormData automatically sets Content-Type to multipart/form-data\nexport const uploadVideo = formData => api.post('/api/videos/upload', formData);\n\n// Fetch list of videos with pagination and search functionality\nexport const fetchVideos = (search = '', page = 1) => {\n  return api.get(`/api/videos?search=${encodeURIComponent(search)}&page=${page}`);\n};\n\n// Stream video - returns the full URL to the video stream endpoint\nexport const streamVideo = id => `${API_URL}/api/videos/stream/${id}`;\n\n// Add comment to video\nexport const addComment = (videoId, text) => api.post('/api/comments/comment', {\n  videoId,\n  text\n});","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","data","FormData","login","email","password","post","register","username","uploadVideo","formData","fetchVideos","search","page","get","encodeURIComponent","streamVideo","id","addComment","videoId","text"],"sources":["C:/Users/akshi/OneDrive/Desktop/video streaming App/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:9002';\r\n\r\n// Axios instance for authenticated requests\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\n// Include token in requests\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  \r\n  // Attach Authorization token if available\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  \r\n  // Dynamically set Content-Type\r\n  if (!(config.data instanceof FormData)) {\r\n    config.headers['Content-Type'] = 'application/json'; // Set JSON header only for non-FormData\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\n// API functions\r\n\r\n// User authentication\r\nexport const login = (email, password) => api.post('/api/auth/login', { email, password });\r\nexport const register = (username, email, password) => api.post('/api/auth/register', { username, email, password });\r\n\r\n// Upload video - FormData automatically sets Content-Type to multipart/form-data\r\nexport const uploadVideo = (formData) => api.post('/api/videos/upload', formData);\r\n\r\n// Fetch list of videos with pagination and search functionality\r\nexport const fetchVideos = (search = '', page = 1) => {\r\n    return api.get(`/api/videos?search=${encodeURIComponent(search)}&page=${page}`);\r\n  };\r\n  \r\n\r\n// Stream video - returns the full URL to the video stream endpoint\r\nexport const streamVideo = (id) => `${API_URL}/api/videos/stream/${id}`;\r\n\r\n// Add comment to video\r\nexport const addComment = (videoId, text) => api.post('/api/comments/comment', { videoId, text });\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;;AAEvC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;;AAEF;AACAC,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;;EAEA;EACA,IAAI,EAAED,MAAM,CAACM,IAAI,YAAYC,QAAQ,CAAC,EAAE;IACtCP,MAAM,CAACI,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB,CAAC,CAAC;EACvD;EAEA,OAAOJ,MAAM;AACf,CAAC,CAAC;;AAEF;;AAEA;AACA,OAAO,MAAMQ,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAKhB,GAAG,CAACiB,IAAI,CAAC,iBAAiB,EAAE;EAAEF,KAAK;EAAEC;AAAS,CAAC,CAAC;AAC1F,OAAO,MAAME,QAAQ,GAAGA,CAACC,QAAQ,EAAEJ,KAAK,EAAEC,QAAQ,KAAKhB,GAAG,CAACiB,IAAI,CAAC,oBAAoB,EAAE;EAAEE,QAAQ;EAAEJ,KAAK;EAAEC;AAAS,CAAC,CAAC;;AAEpH;AACA,OAAO,MAAMI,WAAW,GAAIC,QAAQ,IAAKrB,GAAG,CAACiB,IAAI,CAAC,oBAAoB,EAAEI,QAAQ,CAAC;;AAEjF;AACA,OAAO,MAAMC,WAAW,GAAGA,CAACC,MAAM,GAAG,EAAE,EAAEC,IAAI,GAAG,CAAC,KAAK;EAClD,OAAOxB,GAAG,CAACyB,GAAG,CAAC,sBAAsBC,kBAAkB,CAACH,MAAM,CAAC,SAASC,IAAI,EAAE,CAAC;AACjF,CAAC;;AAGH;AACA,OAAO,MAAMG,WAAW,GAAIC,EAAE,IAAK,GAAG7B,OAAO,sBAAsB6B,EAAE,EAAE;;AAEvE;AACA,OAAO,MAAMC,UAAU,GAAGA,CAACC,OAAO,EAAEC,IAAI,KAAK/B,GAAG,CAACiB,IAAI,CAAC,uBAAuB,EAAE;EAAEa,OAAO;EAAEC;AAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}